[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DJI Thermal SDK",
    "section": "",
    "text": "#hide\nThis version of DJI Thermal SDK is 1.3, which was published on 05/15/2022"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "DJI Thermal SDK",
    "section": "Install",
    "text": "Install\npip install dji_thermal_sdk"
  },
  {
    "objectID": "index.html#load-dll",
    "href": "index.html#load-dll",
    "title": "DJI Thermal SDK",
    "section": "Load DLL",
    "text": "Load DLL\nNormally, DJI SDK DLLs include libdirp.dll, libv_dirp.dll, libv_girp.dll, libv_iirp.dll, libv_list.ini.\nyou should put all the dlls and your codes in a same folder.\nThe reason that the following codes are commented is because it can’t pass the GitHub CI test, but it works well.\nDJI dlls use C++, and when we use ctypes to invoke them, python complier will pop out ‘invalid ELF header’ error.\n\n'''\ntry:\n    _libdirp = cdll.LoadLibrary(\"./libdirp.dll\")\n    DJI.set_dirp_dll(_libdirp)\nexcept FileNotFoundError as err:\n    print(err)\nprint(DJI._libdirp)\n'''\n\n<CDLL 'D:\\LYU\\Code\\git_repository\\dji_thermal_sdk\\libdirp.dll', handle 7ffe6f310000 at 0x1aa05b61850>\n\n\nTrue"
  },
  {
    "objectID": "index.html#get-the-handle-of-a-r-jpeg-image",
    "href": "index.html#get-the-handle-of-a-r-jpeg-image",
    "title": "DJI Thermal SDK",
    "section": "Get the handle of a R-JPEG image",
    "text": "Get the handle of a R-JPEG image\nDIRP_HANDLE is a void pointer, and it has been definded.\nyou can get it by package.DIRP_HANDLE\n\nnbdev.show_doc(dirp_create_from_rjpeg)\n\n\ndirp_create_from_rjpeg[source]\n\n\ndirp_create_from_rjpeg(data, size, ph)\n\nParameters: [in] data: R-JPEG binary data buffer pointer [in] size: R-JPEG binary data buffer size in bytes [out]ph : DIRP API handle pointer - reminder: use two-level pointer to assign value to one-level pointer Return: int return code dirp_ret_code_e\n\n\n\n'''\nrd = r\"dataset\\Deer_Goats_Unsure__2022-02-02__02-42-12(2).JPG\"\nwith open(rd, 'rb') as f:\n    content = f.read()\n    print(len(content))\n# method1 to get the file size\nprint(f\"File size: {os.path.getsize(rd)}\")\n# method 2 to get the file size\nfile_stat = os.stat(rd)\nsize = c_int32(file_stat.st_size)\nprint(f\"File size: {size}\")\n\n# the method to create a string buffer, which is important.\nrjpeg_data = CT.create_string_buffer(len(content))\nrjpeg_data.value = content\nprint(f\"rjpeg_data: {rjpeg_data}\")\n\n# test the function to create a handle of an image\nret = dirp_create_from_rjpeg(rjpeg_data,size, CT.byref(DIRP_HANDLE))\nprint(f'ret = {ret}')\nif ret == 0:\n    print(\"successfully get the r-jpeg handle.\")\n#\nprint(f\"DIRP_HANDLE: {DIRP_HANDLE}  address: {hex(DIRP_HANDLE.value)} \")\n'''"
  },
  {
    "objectID": "index.html#get-the-version-of-api",
    "href": "index.html#get-the-version-of-api",
    "title": "DJI Thermal SDK",
    "section": "Get the version of API",
    "text": "Get the version of API\n\nnbdev.show_doc(dirp_get_api_version)\n\n\ndirp_get_api_version[source]\n\n\ndirp_get_api_version(version)\n\nParameters: [out] version DIRP API version information pointer Return: int return code dirp_ret_code_e\n\n\n\nnbdev.show_doc(dirp_api_version_t)\n\n\nclass dirp_api_version_t[source]\n\n\ndirp_api_version_t() :: Structure\n\nAPI version structure definition\n\n\n\n'''\njpeg_version = dirp_api_version_t() \nret = dirp_get_api_version(CT.byref(jpeg_version))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\n#\nprint(f\"jpeg_version.api: \\t {jpeg_version.api}\")\nprint(f\"jpeg_version.magic: \\t {jpeg_version.magic}\")\n'''"
  },
  {
    "objectID": "index.html#get-color-bar",
    "href": "index.html#get-color-bar",
    "title": "DJI Thermal SDK",
    "section": "Get Color Bar",
    "text": "Get Color Bar\n\nnbdev.show_doc(dirp_get_color_bar)\n\n\ndirp_get_color_bar[source]\n\n\ndirp_get_color_bar(h, color_bar)\n\nParameters: [in] h: DIRP API handle [out] color_bar: ISP color bar parameters pointer Return: int return code dirp_ret_code_e\n\n\n\nnbdev.show_doc(dirp_color_bar_t)\n\n\nclass dirp_color_bar_t[source]\n\n\ndirp_color_bar_t() :: Structure\n\nColor bar parameters structure definition\n\n\n\n'''\njpeg_color_bar = dirp_color_bar_t()\nret = dirp_get_color_bar(DIRP_HANDLE, CT.byref(jpeg_color_bar))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nprint(f\"jpeg_color_bar.high: \\t {jpeg_color_bar.high}\")\nprint(f\"jpeg_color_bar.low: \\t {jpeg_color_bar.low}\")\nprint(f\"jpeg_color_bar.manual_enable: \\t {jpeg_color_bar.manual_enable}\")\n'''"
  },
  {
    "objectID": "index.html#get-the-resolution-of-a-r-jpeg-image",
    "href": "index.html#get-the-resolution-of-a-r-jpeg-image",
    "title": "DJI Thermal SDK",
    "section": "Get the resolution of a R-JPEG image",
    "text": "Get the resolution of a R-JPEG image\nnbdev.show_doc(dirp_create_from_rjpeg)\n\nnbdev.show_doc(dirp_get_rjpeg_resolution)\n\n\ndirp_get_rjpeg_resolution[source]\n\n\ndirp_get_rjpeg_resolution(h, rjpeg_info)\n\nGet R-JPEG image resolution information. Parameters [in]h: DIRP API handle [out]rjpeg_info: R-JPEG basic information pointer Returns int return code dirp_ret_code_e\n\n\n\nnbdev.show_doc(dirp_resolution_t)\n\n\nclass dirp_resolution_t[source]\n\n\ndirp_resolution_t() :: Structure\n\nThe image size structure definition\n\n\n\n'''\nrjpeg_resolution = dirp_resolution_t()\nret = dirp_get_rjpeg_resolution(DIRP_HANDLE, CT.byref(rjpeg_resolution))\nprint(f'ret = {ret}')\nif ret == 0:\n    print(\"successfully get the resolution.\")\n\nout = f'Height: {rjpeg_resolution.height}, width: {rjpeg_resolution.width}'\nout\n'''"
  },
  {
    "objectID": "index.html#set-pseudo-color",
    "href": "index.html#set-pseudo-color",
    "title": "DJI Thermal SDK",
    "section": "Set Pseudo Color",
    "text": "Set Pseudo Color\n\nnbdev.show_doc(dirp_set_pseudo_color)\n\n\n'''\nret = dirp_set_pseudo_color(DIRP_HANDLE, c_int(0))\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nelse:\n    print(f\"Error: ret={ret}\")\n'''"
  },
  {
    "objectID": "index.html#transform-a-thermal-image-by-a-specific-palette",
    "href": "index.html#transform-a-thermal-image-by-a-specific-palette",
    "title": "DJI Thermal SDK",
    "section": "Transform a thermal image by a specific palette",
    "text": "Transform a thermal image by a specific palette\n\nnbdev.show_doc(dirp_process)\n\n\n'''\nimport matplotlib.pyplot as plt\nimport numpy as np\nsize = rjpeg_resolution.height * rjpeg_resolution.width * 3 * CT.sizeof(c_uint8)\nraw_image_buffer = CT.create_string_buffer(size)\nprint(raw_image_buffer.raw[100])\nret = dirp_process(DIRP_HANDLE,byref(raw_image_buffer), size)\nif ret == DIRP_SUCCESS:\n    print(\"Success\")\nelse:\n    print(f\"Error: ret={ret}\")\n#\nraw_file_path = os.path.splitext(rd)[0] + \".raw\"\nprint(raw_file_path)\nwith open(raw_file_path, 'wb') as f:\n    f.write(raw_image_buffer.raw)\n#\nif os.path.exists(raw_file_path):\n    print(f\"Success! file size: {os.path.getsize(raw_file_path)}\")\nelse:\n    print(\"Error\")\n#\nwith open(raw_file_path, encoding='cp1252') as fin:\n    img = np.fromfile(fin, dtype = np.uint8)\n    print(img.shape)\n    img.shape = (512,640,3)\n    #original = Image.fromarray(img)\n#\n\nfig = plt.figure(figsize=(10,8))\nplt.imshow(img, cmap='gray')\n'''"
  },
  {
    "objectID": "core_dji.html",
    "href": "core_dji.html",
    "title": "DJI Thermal SDK",
    "section": "",
    "text": "dirp_rjpeg_version_t\nR-JPEG version structure definition\n\n\n\ndirp_resolution_t\nThe image size structure definition\n\n\n\ndirp_measurement_params_t\nCustomize temperature measurement parameteres structure definition\n\n\n\ndirp_measurement_params_range_t\nRange of temperature measurement parameteres structure definition\n\n\n\ndirp_isp_pseudo_color_lut_t\nPseudo color LUT array structure definition\n\n\n\ndirp_isotherm_t\nIsotherm parameters structure definition\n\n\n\ndirp_enhancement_params_t\nImage enhancement parameteres structure definition\n\n\n\ndirp_color_bar_t\nColor bar parameters structure definition\n\n\n\ndirp_api_version_t\nAPI version structure definition\n\n\n\nset_dirp_dll\n\n set_dirp_dll (libdirp)\n\n\n\n\ndirp_set_verbose_level\n\n dirp_set_verbose_level (level)\n\nSet log print level. Parameters [in]level:Log pring level dirp_verbose_level_e\n\n\n\ndirp_set_pseudo_color\n\n dirp_set_pseudo_color (h, pseudo_color)\n\nSet custom ISP pseudo color type. Parameters [in]h:DIRP API handle [in]pseudo_color:ISP pseudo color type dirp_pseudo_color_e Returns int return code dirp_ret_code_e\n\n\n\ndirp_set_measurement_params\n\n dirp_set_measurement_params (h, measurement)\n\nSet custom temperature measurement parameters. Parameters [in]h:DIRP API handle [in]measurement_params:Temperature measurement parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_set_logger_file\n\n dirp_set_logger_file (file_name)\n\nSet external logger file. Parameters [in]file_name:File name which save log information. Set it as nullptr if you want print log on console.\n\n\n\ndirp_set_isotherm\n\n dirp_set_isotherm (h, isotherm)\n\nSet custom ISP isotherm parameters. Parameters [in]h:DIRP API handle [in]isotherm:ISP isotherm parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_set_enhancement_params\n\n dirp_set_enhancement_params (h, enhancement_params)\n\nSet custom ISP enhancement parameters. Parameters [in]h:DIRP API handle [in]enhancement_params:ISP enhancement parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_set_color_bar\n\n dirp_set_color_bar (h, color_bar)\n\nSet custom ISP color bar parameters. Parameters [in]h:DIRP API handle [in]color_bar:ISP color bar parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_process_strech\n\n dirp_process_strech (h, strech_image, size)\n\nRun ISP strech algorithm with RAW data in R-JPEG and output FLOAT32 streching image. The ISP strech configurable parameters can be modifed by these APIs:\ndirp_set_enhancement_params\ndirp_set_isotherm\ndirp_set_color_bar\nParameters [in]h:DIRP API handle [out]strech_image:Strech image data buffer pointer [in]size:Strech image data buffer size in bytes. Returns int return code dirp_ret_code_e\n\n\n\ndirp_process\n\n dirp_process (h, color_image, size)\n\nRun ISP algorithm with RAW data in R-JPEG and output RGB pseudo color image. The ISP configurable parameters can be modifed by these APIs: dirp_set_enhancement_params dirp_set_isotherm dirp_set_color_bar dirp_set_pseudo_color Parameters [in]h:DIRP API handle [out]color_image:Color image data buffer pointer [in]size:Color image data buffer size in bytes. Returns int return code dirp_ret_code_e\n\n\n\ndirp_measure_ex\n\n dirp_measure_ex (h, temp_image, size)\n\nMeasure temperature of whole thermal image with RAW data in R-JPEG. Each FLOAT32 pixel value represents the real temperature in Celsius. The custom measurement parameters can be modifed by this API:\ndirp_set_measurement_params Parameters [in]h:DIRP API handle [out]temp_image:Temperature image data buffer pointer [in]size:Temperature image data buffer size in bytes Returns int return code dirp_ret_code_e\n\n\n\ndirp_measure\n\n dirp_measure (h, temp_image, size)\n\nMeasure temperature of whole thermal image with RAW data in R-JPEG. Each INT16 pixel value represents ten times the temperature value in Celsius. In other words, each LSB represents 0.1 degrees Celsius. The custom measurement parameters can be modifed by this API:dirp_set_measurement_params Parameters [in]h:DIRP API handle [out]temp_image:Temperature image data buffer pointer [in]size:Temperature image data buffer size in bytes Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_rjpeg_version\n\n dirp_get_rjpeg_version (h, version)\n\nGet R-JPEG version. Parameters [in]h:DIRP API handle [out]version: R-JPEG version information pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_rjpeg_resolution\n\n dirp_get_rjpeg_resolution (h, rjpeg_info)\n\nGet R-JPEG image resolution information. Parameters [in]h: DIRP API handle [out]rjpeg_info: R-JPEG basic information pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_pseudo_color_lut\n\n dirp_get_pseudo_color_lut (h, pseudo_lut)\n\nGet ISP pseudo color LUT. Parameters [in]h: DIRP API handle [out]pseudo_lut: ISP pseudo color LUT pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_pseudo_color\n\n dirp_get_pseudo_color (h, pseudo_color)\n\nGet orignial/custom ISP pseudo color type. Parameters [in]h: DIRP API handle [out]pseudo_color ISP pseudo color type pointer dirp_pseudo_color_e Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_original_raw\n\n dirp_get_original_raw (h, raw_image, size)\n\nGet original RAW binary data from R-JPEG. Parameters [in]h:DIRP API handle [out]raw_image:Original RAW image data buffer pointer [in]size:Original RAW image data buffer size in bytes Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_measurement_params_range\n\n dirp_get_measurement_params_range (h, params_range)\n\nGet range of temperature measurement parameters that user can set. Parameters [in] h: DIRP API handle [out] params_range: Temperature measurement parameters range pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_measurement_params\n\n dirp_get_measurement_params (h, measurement_params)\n\nGet orignial/custom temperature measurement parameters. Parameters [in] h: DIRP API handle [out] measurement_params: Temperature measurement parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_isotherm\n\n dirp_get_isotherm (h, isotherm)\n\nGet orignial/custom ISP isotherm parameters. Parameters [in]h: DIRP API handle [out]isotherm: ISP isotherm parameters pointer Returns int return code dirp_ret_code_e\n\n\n\ndirp_get_enhancement_params\n\n dirp_get_enhancement_params (h, enhancement_params)\n\nGet orignial/custom ISP enhancement parameters. Parameters: [in] h: DIRP API handle [out] enhancement_params ISP enhancement parameters pointer\nReturn: int return code dirp_ret_code_e\n\n\n\ndirp_get_color_bar_adaptive_params\n\n dirp_get_color_bar_adaptive_params (h, color_bar)\n\nGet adaptive ISP color bar parameters in automatic mode. In color bar automatic mode : manual_enable in dirp_color_bar_t is set as false. The inner ISP algorithm will calculate the best range values for color bar. Before calling this API you should call dirp_process once at least. And if any processing or measurement parameters had been changed, you should also call dirp_process again for getting new color bar adaptive parameters. In the above calling dirp_process, manual_enable in dirp_color_bar_t must be set as false.\nParameters [in] h: DIRP API handle [out] color_bar: ISP color bar parameters pointer\nReturn: int return code dirp_ret_code_e\n\n\n\ndirp_get_color_bar\n\n dirp_get_color_bar (h, color_bar)\n\nParameters: [in] h: DIRP API handle [out] color_bar: ISP color bar parameters pointer Return: int return code dirp_ret_code_e\n\n\n\ndirp_get_api_version\n\n dirp_get_api_version (version)\n\nParameters: [out] version DIRP API version information pointer Return: int return code dirp_ret_code_e\n\n\n\ndirp_destroy\n\n dirp_destroy (ph)\n\nParameters: [in]ph: DIRP API handle Return: int return code dirp_ret_code_e\n\n\n\ndirp_create_from_rjpeg\n\n dirp_create_from_rjpeg (data, size, ph)\n\nParameters: [in] data: R-JPEG binary data buffer pointer [in] size: R-JPEG binary data buffer size in bytes [out]ph : DIRP API handle pointer - reminder: use two-level pointer to assign value to one-level pointer Return: int return code dirp_ret_code_e\n\n\n\nget_pseudo_color\n\n get_pseudo_color ()\n\nreturn the pseudo color dictionary."
  },
  {
    "objectID": "core_utility.html",
    "href": "core_utility.html",
    "title": "Utility",
    "section": "",
    "text": "LhtFile\n\n LhtFile (fileName, filePath)\n\nSelf-defined class, which is used to record the file name and file path.\n\n\n\nFindFilesByExtension\n\n FindFilesByExtension (root_directory, extension)\n\nFilter all files based on the extention. Parameters: [in] root_directory: the path of a directory [in] extension: file extension Return: ret: a list made of LhtFile objects."
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "dji_thermal_sdk",
    "section": "",
    "text": "Before anything else, please install the git hooks that run automatic scripts during each commit and merge to strip the notebooks of superfluous metadata (and avoid merge conflicts). After cloning the repository, run the following command inside it:\nnbdev_install_git_hooks\n\n\n\n\nEnsure the bug was not already reported by searching on GitHub under Issues.\nIf you’re unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\nBe sure to add the complete error messages.\n\n\n\n\nOpen a new GitHub pull request with the patch.\nEnsure that your PR includes a test that fails without your patch, and pass with it.\nEnsure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n\n\n\n\n\nKeep each PR focused. While it’s more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\nDo not mix style changes/fixes with “functional” changes. It’s very difficult to review such PRs and it most likely get rejected.\nDo not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\nDo not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\nIf, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won’t need to review the whole PR again. In the exception case where you realize it’ll take many many commits to complete the requests, then it’s probably best to close the PR, do the work and then submit it again. Use common sense where you’d choose one way over another.\n\n\n\n\n\nDocs are automatically created from the notebooks in the nbs folder."
  }
]